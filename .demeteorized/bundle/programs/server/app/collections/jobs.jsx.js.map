{"version":3,"sources":["jobs.jsx"],"names":[],"mappings":"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","file":"/collections/jobs.jsx.js","sourcesContent":["Jobs = new Mongo.Collection('jobs');\n\nMeteor.methods({\n  'jobs.add': (job) => {\n    check(job, {\n      title: String,\n      description: String,\n      email: String,\n      company: String,\n      homepage: String\n    });\n\n    if (!job.title) {\n      throw new Meteor.Error(422, 'Title should not be blank');\n    }\n    if (!job.description) {\n      throw new Meteor.Error(422, 'Description should not be blank');\n    }\n    if (!job.email) {\n      throw new Meteor.Error(422, 'E-Mail should not be blank');\n    }\n\n    const slug = getSlug(job.title);\n    const identifier = Random.hexString(64);\n    _.extend(job, { identifier: identifier, slug: slug });\n\n    // send an E-Mail to the user\n    if (Meteor.isServer) {\n      Meteor.defer(() => {\n        Email.send({\n          from: 'Remote Work <noreply@remotework.in>',\n          to: job.email,\n          subject: 'Thank you for posting your job \"' + job.title + '\" on \"Remote Work\"',\n          html: '' +\n            '<b>Note: Keep this E-Mail as it gives you the possibility to activate, update and remove the job posting.</b>' +\n            '<br /><br />' +\n            'Please click the link below to activate your job posting: <br />' +\n            '<a href=\"' + Meteor.absoluteUrl().substring(0, Meteor.absoluteUrl().length - 1) + FlowRouter.path('activateJob', { identifier: identifier }) + '\" target=\"_blank\">Activate job posting</a>' +\n            '<br /><br />' +\n            'Update or remove your job posting with these links: <br />' +\n            '<a href=\"' + Meteor.absoluteUrl().substring(0, Meteor.absoluteUrl().length - 1) + FlowRouter.path('updateJob', { identifier: identifier }) + '\" target=\"_blank\">Update job posting</a>' +\n            '<br />' +\n            '<a href=\"' + Meteor.absoluteUrl().substring(0, Meteor.absoluteUrl().length - 1) + FlowRouter.path('removeJob', { identifier: identifier }) + '\" target=\"_blank\">Remove job posting</a>' +\n            '<br /><br />' +\n            'Regards' +\n            '<br /><br />' +\n            'The \"Remote Work\"-Team'\n        });\n      });\n    }\n    let jobID = Jobs.insert(job);\n    return jobID;\n  },\n\n  'jobs.activate': (identifier) => {\n    check(identifier, String);\n\n    if (!identifier) {\n      throw new Meteor.Error(422, 'Identifier should not be blank');\n    }\n\n    return Jobs.update(\n      { identifier: identifier },\n      { $set: { isActive: true } }\n    );\n  },\n\n  'jobs.remove': (identifier) => {\n    check(identifier, String);\n\n    if (!identifier) {\n      throw new Meteor.Error(422, 'Identifier should not be blank');\n    }\n\n    return Jobs.remove({ identifier: identifier });\n  },\n\n  'jobs.update': (identifier, job) => {\n    check(identifier, String);\n    check(job, {\n      title: String,\n      description: String,\n      email: String,\n      company: String,\n      homepage: String\n    });\n\n    if (!job.title) {\n      throw new Meteor.Error(422, 'Title should not be blank');\n    }\n    if (!job.description) {\n      throw new Meteor.Error(422, 'Description should not be blank');\n    }\n    if (!job.email) {\n      throw new Meteor.Error(422, 'E-Mail should not be blank');\n    }\n\n    const slug = getSlug(job.title);\n\n    return Jobs.update(\n      { identifier: identifier },\n      { $set: { title: job.title, description: job.description, email: job.email, company: job.company, homepage: job.homepage, slug: slug } }\n    );\n  }\n});\n\nJobs.before.insert((userId, document) => {\n  document.isActive = false;\n  document.createdAt = new Date();\n  document.updatedAt = new Date();\n});\n\nJobs.before.update((userId, document, fieldNames, modifier, options) => {\n  modifier.$set = modifier.$set || {};\n  modifier.$set.updatedAt = new Date();\n});\n"]}